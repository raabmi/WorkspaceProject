
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "emGauss"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "emGauss-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('emGauss')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("createCluster")
> ### * createCluster
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: createCluster
> ### Title: Create Cluster blal
> ### Aliases: createCluster
> 
> ### ** Examples
> 
> v <- c(2, 4, 5,6,5,2,2, 1, 1, 2,  2, 1,6,7,8,7,6, 5, 2,1)
> 
> data <- data.frame(name = 1:length(v)+5, v)
> data  <- as.matrix(data)
> createCluster(as.matrix(data), 2, method = 'binbased')
        mu   sigma2
1  8.60000 1.200000
2 17.28125 8.402218
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("createCluster", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("em.gauss")
> ### * em.gauss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: em.gauss
> ### Title: Estimating Ecoff by mixing Gaussians
> ### Aliases: em.gauss
> 
> ### ** Examples
> 
> y <- c(2, 4, 5,6,5,2,2, 1, 1, 2,  2, 1,6,7,8,7,6, 5, 2,1)
> em.gauss(y = y,
+          mu = c(8.36, 17.28),
+          sigma2 = c(1.67,  8.4),
+          pi = c(1/2, 1/2),
+          alpha = 1,
+          beta = 3,
+          epsilon = 0.0001)
$mu
[1]  9.231212 19.996720

$sigma2
[1] 2.441774 5.798490

$pi
[1] 0.340708 0.659292

$loglik
[1] -205.4879

$ecoff
[1] 14.39486

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("em.gauss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("em.gauss.opti.groups")
> ### * em.gauss.opti.groups
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: em.gauss.opti.groups
> ### Title: Finding the optimal number of components
> ### Aliases: em.gauss.opti.groups
> 
> ### ** Examples
> 
> y <- c(2, 4, 5,6,5,2,2, 1, 1, 2,  2, 1,6,7,8,7,6, 5, 2,1)
> em.gauss.opti.groups(y,
+                      k= 2,
+                      alpha = 1,
+                      beta = 2)
[[1]]
[[1]]$mu
[1] 16.32876

[[1]]$sigma2
[1] 29.42041

[[1]]$pi
[1] 1

[[1]]$loglik
[1] -229.055

[[1]]$ecoff
[1] 3.710517


[[2]]
[[2]]$mu
[1]  9.220427 19.988301

[[2]]$sigma2
[1] 2.332149 5.802563

[[2]]$pi
[1] 0.339852 0.660148

[[2]]$loglik
[1] -205.5307

[[2]]$ecoff
[1] 14.38448


$AIC
[1] 462.1100 421.0614

$BIC
[1] 475.3800 454.2363

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("em.gauss.opti.groups", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.98 0.05 3.38 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
